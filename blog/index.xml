<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on aparcar</title><link>https://aparcar.org/blog/</link><description>Recent content in Blogs on aparcar</description><generator>Hugo</generator><language>en-US</language><copyright>Copyright Â© 2020, Paul Spooren.</copyright><lastBuildDate>Wed, 27 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://aparcar.org/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenWrt with Wireguard VPN (IPv6)</title><link>https://aparcar.org/openwrt-with-wireguard-vpn-ipv6/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://aparcar.org/openwrt-with-wireguard-vpn-ipv6/</guid><description>This is a follow up on the previous post on how to set up Wireguard.
In case IPv6 traffic on OpenWrt clients should be handled as well, this post describes how to distribute a IPv6 subnet to clients of the tunnel server.
The setup assumes that the tunnel server uses an IPv6 subnet that is big enough to split into multiple smaller networks. In this setup the tunnel server has a /64 subnet and distributes /80 networks to clients.</description></item><item><title>OpenWrt with Wireguard VPN</title><link>https://aparcar.org/openwrt-with-wireguard-vpn/</link><pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate><guid>https://aparcar.org/openwrt-with-wireguard-vpn/</guid><description>There are many many many tutorials on how to setup Wireguard VPN on Debian (Ubuntu) and OpenWrt, however I want to keep it here for my personal notes. This setup describes a network address traversal (NAT) tunnel server as well as a pinging client. The client can connect to the Internet using the tunnel servers IP and the tunnel server can login to a client since it pings the tunnel server with its address and open port.</description></item><item><title>Running OpenWrt on Hetzner</title><link>https://aparcar.org/running-openwrt-on-hetzner/</link><pubDate>Sat, 16 Oct 2021 00:00:00 +0000</pubDate><guid>https://aparcar.org/running-openwrt-on-hetzner/</guid><description>At this point I&amp;rsquo;m not aware of any cloud provider offering OpenWrt as an selectable operating system. For whoever is interested in using it on the popular cloud provider Hetzner anyway, this short manual should give an idea.
Entering the Rescue Mode Create any Hetzner VM with any distribution. None of the software settings matter since it&amp;rsquo;ll be overwritten by OpenWrt in a minute. Once the VM is running enter the Rescue mode.</description></item><item><title>LoRaWAN Evaluation</title><link>https://aparcar.org/lorawan-evaluation/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://aparcar.org/lorawan-evaluation/</guid><description>Contents Introduction Motivation Aim Structure Related Work Hardware Microcontroller Gateways Printed Circuit Board Software TheThingsNetwork Platformio Sensor Node InfluxDB Database Grafana Dashboard Resources CayenneLPP Sensors Conclusion Outlook Code Utility Sensor Node References Introduction This project evaluates the LoRa frequency modulation and the LoRaWAN stack as an alternative for existing sensor setups using the technologies ZigBee and GSM. The current scope is to build a simple stack to collect sensor data end visualize them inside a web interface.</description></item><item><title>Live rain fall monitoring via LoRaWAN</title><link>https://aparcar.org/live-rain-fall-monitoring-via-lorawan/</link><pubDate>Sun, 14 Feb 2021 18:54:11 -1000</pubDate><guid>https://aparcar.org/live-rain-fall-monitoring-via-lorawan/</guid><description>This text briefly describes a rain gauge setup which uses LoRaWAN to transmit rain fall events to an online database. The setup makes use of the high precision ONSET HOBO rain gauge. Instead of using the vendors data logger which requires manual at-device data transfers, a LoRaWAN compatible microcontroller sends data wirelessly.
LoRaWAN allows low bandwidth data transmissions over long ranges while requiring minimal power. While sensor nodes are individually managed, the gateways, receiving and forwarding data packets to an online database, can be maintained by institutions and are often free of charge.</description></item><item><title>Running OpenWrt with SELinux</title><link>https://aparcar.org/running-openwrt-with-selinux/</link><pubDate>Fri, 11 Sep 2020 11:04:01 -1000</pubDate><guid>https://aparcar.org/running-openwrt-with-selinux/</guid><description>This blog post describes the creation and testing of OpenWrt images running SELinux to improve security. The support is still limited and not ready for any productive usage, however this post should give a basic idea of its current state.
History Back in November 2019 Thomas Petazzoni sent a first patchset adding optional SELinux support to OpenWrt. Due to the complexity of integrating SELinux into the OpenWrt build system and missing bits in the patchset, the patches never made it into the main branch.</description></item></channel></rss>