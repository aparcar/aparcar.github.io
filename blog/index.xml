<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on aparcar</title><link>https://aparcar.org/blog/</link><description>Recent content in Blogs on aparcar</description><generator>Hugo</generator><language>en-US</language><copyright>Copyright Â© 2020, Paul Spooren.</copyright><lastBuildDate>Wed, 27 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://aparcar.org/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenWrt with Wireguard VPN (IPv6)</title><link>https://aparcar.org/openwrt-with-wireguard-vpn-ipv6/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://aparcar.org/openwrt-with-wireguard-vpn-ipv6/</guid><description>&lt;blockquote>
&lt;p>This is a follow up on the previous post on &lt;a href="https://aparcar.org/openwrt-with-wireguard-vpn/">how to set up
Wireguard&lt;/a>.&lt;/p>&lt;/blockquote>
&lt;p>In case IPv6 traffic on OpenWrt clients should be handled as well, this post
describes how to distribute a IPv6 subnet to clients of the tunnel server.&lt;/p>
&lt;p>The setup assumes that the tunnel server uses an IPv6 subnet that is big enough
to split into multiple smaller networks. In this setup the tunnel server has a
&lt;code>/64&lt;/code> subnet and distributes &lt;code>/80&lt;/code> networks to clients.&lt;/p></description></item><item><title>OpenWrt with Wireguard VPN</title><link>https://aparcar.org/openwrt-with-wireguard-vpn/</link><pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate><guid>https://aparcar.org/openwrt-with-wireguard-vpn/</guid><description>&lt;p>There are &lt;a href="http://chrisbuchan.co.uk/computing/wireguard-setup-openwrt/">many&lt;/a> &lt;a href="https://openwrt.org/docs/guide-user/services/vpn/wireguard/server">many&lt;/a> &lt;a href="https://casept.github.io/post/wireguard-server-on-openwrt-router/">many&lt;/a> tutorials on how to setup
Wireguard VPN on Debian (Ubuntu) and OpenWrt, however I want to keep it here for
my personal notes. This setup describes a &lt;em>network address traversal&lt;/em> (NAT)
tunnel server as well as a &lt;em>pinging&lt;/em> client. The client can connect to the
Internet using the tunnel servers IP and the tunnel server can login to a client
since it &lt;em>pings&lt;/em> the tunnel server with its address and open port.&lt;/p></description></item><item><title>Running OpenWrt on Hetzner</title><link>https://aparcar.org/running-openwrt-on-hetzner/</link><pubDate>Sat, 16 Oct 2021 00:00:00 +0000</pubDate><guid>https://aparcar.org/running-openwrt-on-hetzner/</guid><description>&lt;p>At this point I&amp;rsquo;m not aware of any cloud provider offering OpenWrt as an
selectable operating system. For whoever is interested in using it on the
popular cloud provider Hetzner anyway, this short manual should give an idea.&lt;/p>
&lt;h2 id="entering-the-rescue-mode">Entering the Rescue Mode&lt;/h2>
&lt;p>Create any Hetzner VM with any distribution. None of the software settings
matter since it&amp;rsquo;ll be overwritten by OpenWrt in a minute. Once the VM is running
enter the &lt;em>Rescue&lt;/em> mode. For that click on &lt;em>Enable Rescue &amp;amp; Power Cycle&lt;/em>
followed by clicking on a button with the same label again. I&amp;rsquo;m using the
default &lt;em>linux64&lt;/em> as &lt;em>Rescue OS&lt;/em>.&lt;/p></description></item><item><title>LoRaWAN Evaluation</title><link>https://aparcar.org/lorawan-evaluation/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://aparcar.org/lorawan-evaluation/</guid><description>&lt;h1>Contents&lt;/h1>
&lt;div class="toc">
 &lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#introduction">Introduction&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#motivation">Motivation&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#aim">Aim&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#structure">Structure&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#related-work">Related Work&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#hardware">Hardware&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#microcontroller">Microcontroller&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#gateways">Gateways&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#printed-circuit-board">Printed Circuit Board&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#software">Software&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#thethingsnetwork">TheThingsNetwork&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#platformio">Platformio&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#sensor-node">Sensor Node&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#influxdb-database">InfluxDB Database&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#grafana-dashboard">Grafana Dashboard&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#resources">Resources&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#cayennelpp">CayenneLPP&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#sensors">Sensors&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#conclusion">Conclusion&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#outlook">Outlook&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#code">Code&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#utility">Utility&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#sensor-node-1">Sensor Node&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#references">References&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>
&lt;/div>

&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This project evaluates the &lt;em>LoRa&lt;/em> frequency modulation and the &lt;em>LoRaWAN&lt;/em> stack
as an alternative for existing sensor setups using the technologies &lt;em>ZigBee&lt;/em> and
&lt;em>GSM&lt;/em>. The current scope is to build a simple stack to collect sensor data end
visualize them inside a web interface.&lt;/p></description></item><item><title>Live rain fall monitoring via LoRaWAN</title><link>https://aparcar.org/live-rain-fall-monitoring-via-lorawan/</link><pubDate>Sun, 14 Feb 2021 18:54:11 -1000</pubDate><guid>https://aparcar.org/live-rain-fall-monitoring-via-lorawan/</guid><description>&lt;p>This text briefly describes a rain gauge setup which uses LoRaWAN to transmit
rain fall events to an online database. The setup makes use of the high
precision &lt;a href="https://www.onsetcomp.com/products/data-loggers/rg3/">&lt;em>ONSET HOBO&lt;/em>&lt;/a> rain gauge. Instead of using the vendors data
logger which requires manual &lt;em>at-device&lt;/em> data transfers, a LoRaWAN compatible
microcontroller sends data wirelessly.&lt;/p>
&lt;p>LoRaWAN allows low bandwidth data transmissions over long ranges while
requiring minimal power. While sensor nodes are individually managed, the
gateways, receiving and forwarding data packets to an online database, can be
maintained by institutions and are often free of charge. These properties make
LoRaWAN a good replacement for other wireless sensor setups. The possible ranges
are higher than ZigBee, federated gateways allow resource sharing and no service
subscriptions like fore GSM apply.&lt;/p></description></item><item><title>Running OpenWrt with SELinux</title><link>https://aparcar.org/running-openwrt-with-selinux/</link><pubDate>Fri, 11 Sep 2020 11:04:01 -1000</pubDate><guid>https://aparcar.org/running-openwrt-with-selinux/</guid><description>&lt;p>This blog post describes the creation and testing of OpenWrt images running
SELinux to improve security. The support is still limited and not ready for any
productive usage, however this post should give a basic idea of its current
state.&lt;/p>
&lt;h2 id="history">History&lt;/h2>
&lt;p>Back in November 2019 Thomas Petazzoni sent a &lt;a href="https://lists.infradead.org/pipermail/openwrt-devel/2019-November/025973.html">first patchset&lt;/a> adding optional
SELinux support to OpenWrt. Due to the complexity of integrating SELinux into
the OpenWrt build system and missing bits in the patchset, the patches never
made it into the main branch.&lt;/p></description></item></channel></rss>